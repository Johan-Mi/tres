(lists heap heap-refcounts)

; Make sure that a pointer points to the beginning of a valid memory block on
; the heap.
(proc (validate-heap-ptr caller verb ptr)
  (:= panic-message (++ caller
                        ": Tried to "
                        verb
                        " index "
                        ptr))
  (assert (> ptr 0)
          (++ panic-message ", which is before the start of the heap"))
  (assert (not (> ptr (length heap)))
          (++ panic-message ", which is after the end of the heap"))
  (assert (!! heap-refcounts ptr)
          (++ panic-message ", which points to unallocated memory"))
  (assert (!= (!! heap-refcounts ptr) "Infinity")
          (++ panic-message ", which is in the middle of a memory block")))

(proc (heap-f1 size)
  (for j (+ size 1)
    (unless (= 0 (!! heap-refcounts (+ i j -1)))
      (:= j -1)
      (stop-this-script))))

; Add a reference to a memory block.
(proc (heap-share ptr)
  (validate-heap-ptr "heap-share" "share" ptr)
  ([]+= heap-refcounts ptr 1))

; Obtain a memory block on the heap with a given size. A pointer to the block
; gets pushed onto the stack.
(proc (heap-allocate size)
  ; Look for an unallocated block that's big enough
  (for i (length heap)
    (heap-f1 size)
    (unless (= j -1)
      (append stack i)
      (write i size)
      (replace heap-refcounts i 1)
      (for j size
        (replace heap-refcounts (+ i j) "Infinity"))
      (stop-this-script)))

  ; No existing block found, grow the heap
  (append heap size)
  (append heap-refcounts 1)
  (append stack (length heap))
  (repeat size
    (append heap "")
    (append heap-refcounts "Infinity")))

; Decrease the reference count of a memory block and deallocate it if the
; count reaches 0. Custom destructors can be created by respondning to the
; message "_switch_heap_deallocate_X" where X is the type of the block being
; deallocated. When the message is received, a pointer to the block is
; available on the stack and should not be removed.
(proc (heap-deallocate ptr)
  (validate-heap-ptr "heap-deallocate" "deallocate" ptr)
  ([]+= heap-refcounts ptr -1)
  (when (= (!! heap-refcounts ptr) 0)
    (append stack ptr)
    (send-broadcast-sync (++ "_switch_heap_deallocate_" (block.type ptr)))
    (delete-last stack)
    (for i (read ptr)
      (write (+ ptr i) "")
      (replace heap-refcounts (+ ptr i) 0))
    (write ptr "")))

(proc (heap-init)
  (delete-all heap)
  (delete-all heap-refcounts))

; Resize a memory block. The new size must be at least as big as the old one.
; A pointer to the new block gets pushed onto the stack.
(proc (heap-reallocate old-ptr new-size)
  (validate-heap-ptr "heap-reallocate" "move from" old-ptr)
  (assert (not (< new-size (read old-ptr)))
          "heap_reallocate: Tried to reallocate to a smaller memory block")
  (assert (< (!! heap-refcounts old-ptr) 2)
          "heap_reallocate: Tried to move from shared memory block")
  (heap-allocate new-size)
  (for i (read old-ptr)
    (write (+ (last-of stack) i) (read (+ old-ptr i))))
  (heap-deallocate old-ptr))
