(macro (read idx)
  (!! heap ,idx))
(macro (write idx val)
  (replace heap ,idx ,val))
(macro (modify idx op)
  (write ,idx (,op (read ,idx))))

(sprite "main"
  (lists heap heap-refcounts deallocations)

  ; Make sure that a pointer points to the beginning of a valid memory block on
  ; the heap.
  (proc (validate-heap-ptr caller verb ptr)
    (variables message)
    (:= message (++ caller ": Tried to " verb " index " ptr))
    (assert (> ptr 0)
            (++ message ", which is before the start of the heap"))
    (assert (not (> ptr (length heap)))
            (++ message ", which is after the end of the heap"))
    (assert (> (!! heap-refcounts ptr) 0)
            (++ message ", which points to unallocated memory"))
    (assert (!= (!! heap-refcounts ptr) "Infinity")
            (++ message ", which is in the middle of a memory block")))

  ; Add a reference to a memory block.
  (proc (heap-share ptr)
    (validate-heap-ptr "heap-share" "share" ptr)
    ([]+= heap-refcounts ptr 1))

  ; Obtain a memory block on the heap with a given size. A pointer to the block
  ; gets pushed onto the stack.
  (proc (heap-allocate size)
    (variables i curr-block-size)
    ; Look for an unallocated block that's big enough
    (:= curr-block-size 0)
    (for i (length heap)
      (if (= 0 (!! heap-refcounts i))
        (then
          (+= curr-block-size 1)
          (when (> curr-block-size size)
            (append stack (- i size))
            (replace heap-refcounts (- i size) 1)
            (write (- i size) size)
            (repeat size
              (replace heap-refcounts i "Infinity")
              (-= i 1))
            (stop-this-script)))
        (else
          (:= curr-block-size 0))))

    ; No existing block found, grow the heap
    (append heap size)
    (append heap-refcounts 1)
    (append stack (length heap))
    (repeat size
      (append heap "")
      (append heap-refcounts "Infinity")))

  ; Decrease the reference count of a memory block and deallocate it if the
  ; count reaches 0. Custom destructors can be created by respondning to the
  ; message "_switch_heap_deallocate_X" where X is the type of the block being
  ; deallocated. When the message is received, a pointer to the block is
  ; available on the stack and should not be removed. Do not deallocate
  ; recursively, instead add pointers to the `deallocations` list.
  (proc (heap-deallocate ptr)
    (variables i curr-ptr)
    (delete-all deallocations)
    (append deallocations ptr)
    (until (= 0 (length deallocations))
      (:= curr-ptr (last-of deallocations))
      (delete-last deallocations)

      (validate-heap-ptr "heap-deallocate" "deallocate" curr-ptr)
      ([]-= heap-refcounts curr-ptr 1)
      (when (= 0 (!! heap-refcounts curr-ptr))
        (append stack curr-ptr)
        (send-broadcast-sync (++ "_switch_heap_deallocate_"
                                 (block.type curr-ptr)))
        (pop)
        (for i (read curr-ptr)
          (write (+ curr-ptr i) "")
          (replace heap-refcounts (+ curr-ptr i) 0))
        (write curr-ptr ""))))

  (proc (heap-init)
    (delete-all heap)
    (delete-all heap-refcounts))

  ; Resize a memory block. The new size must be at least as big as the old one.
  ; A pointer to the new block gets pushed onto the stack.
  (proc (heap-reallocate old-ptr new-size)
    (variables i)
    (validate-heap-ptr "heap-reallocate" "move from" old-ptr)
    (assert (not (< new-size (read old-ptr)))
            "heap_reallocate: Tried to reallocate to a smaller memory block")
    (assert (= 1 (!! heap-refcounts old-ptr))
            "heap_reallocate: Tried to move from shared memory block")
    (heap-allocate new-size)
    (for i (read old-ptr)
      (write (+ (last-of stack) i) (read (+ old-ptr i))))
    (heap-deallocate old-ptr))

  ; Swaps two indices on the heap.
  (proc (heap-swap ptr-a ptr-b)
    (variables swapper)
    (:= swapper (read ptr-a))
    (write ptr-a (read ptr-b))
    (write ptr-b swapper)))
