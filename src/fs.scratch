(sprite "main"
  (variables fs-root)

  (proc (create-fs-root)
    (create-directory "root" 0)
    (:= fs-root (last-of stack))
    (delete-last stack))

  (proc (create-directory name parent)
    (heap-allocate 4)
    (write (block->type (last-of stack)) "Directory")
    (write (file->name (last-of stack)) name)
    (write (file->parent (last-of stack)) parent)
    (vec-new)
    (write (file->content (!!- stack 1)) (last-of stack))
    (delete-last stack)
    (add-ptr-to-directory (last-of stack) parent))

  (proc (add-ptr-to-directory ptr dir)
    (unless (= 0 dir)
      (vec-push (file->content dir) ptr)))

  (proc (create-file name parent content)
    (heap-allocate 4)
    (write (block->type (last-of stack)) "File")
    (write (file->name (last-of stack)) name)
    (write (file->parent (last-of stack)) parent)
    (write (file->content (last-of stack)) content)
    (add-ptr-to-directory (last-of stack) parent))

  (proc (resolve-path cwd path)
    (if (= "/" (char-at path 1))
      (append stack fs-root)
      (append stack cwd))
    (:= lexer-buf "")
    (for i (+ 1 (str-length path)) ; +1 for a trailing slash
      (if (or (= i (+ 1 (str-length path)))
              (= "/" (char-at path i)))
        (then
          (cond
            (or (= "" lexer-buf)
                (= "." lexer-buf))
            (then) ; Stay in the current directory

            (and (= ".." lexer-buf)
                 (!= 0 (file.parent (last-of stack))))
            (then ; Go up a directory
              (replace-last stack (file.parent (last-of stack))))

            (else
              (find-name-in-directory lexer-buf)
              (handle-stack-error
                (++ "resolve-path: Could not resolve path `" path "`"))))
          (:= lexer-buf ""))
        (else
          (:= lexer-buf (++ lexer-buf (char-at path i)))))))

  (proc (find-name-in-directory name)
    (replace-last stack (file.content (last-of stack)))
    (for i (vec.size (last-of stack))
      (:= i (vec.at (last-of stack) i))
      (when (= name (file.name i))
        (replace-last stack i)
        (stop-this-script)))
    (replace-last stack -1)))
