(include "src/basic-macros.scratch")
(include "src/error-handling.scratch")
(include "src/fields.scratch")
(include "src/terminal.scratch")
(include "src/heap.scratch")
(include "src/vec.scratch")
(include "src/fs.scratch")
(include "src/interp.scratch")
(include "src/process.scratch")

(sprite "Stage"
  (costumes "backdrop" "assets/backdrop.png"))

(sprite "main"
  (variables i
             j
             lexer-buf)

  (lists stack)

  (proc (when-flag-clicked)
    (stack-init)
    (heap-init)
    (term-init)
    (create-fs-root)
    (processes-init)
    (create-directory "bin" fs-root)
    (create-directory "etc" fs-root)
    (ls "/" "/")
    (forever
      (processes-step)))

  (proc (stack-init)
    (delete-all stack))

  (proc (heap-dump)
    (println ">heap-dump")
    (println "Ptr │Value                                   │Refcount")
    (println "────┼────────────────────────────────────────┼────────")
    (for i (length heap)
      (rightpad i 4 " ")
      (rightpad (read i) 40 " ")
      (if (= (!! heap-refcounts i) "Infinity")
        (then
          (println (++ (!!- stack 1) "│" (last-of stack) "│∞")))
        (else
          (println (++ (!!- stack 1)
                       "│"
                       (last-of stack)
                       "│"
                       (!! heap-refcounts i)))))
      (pop)
      (pop)))

  ; Force a string to a certain width by truncating it or filling the remaining
  ; space to the right with a given character. The result gets pushed onto the
  ; stack.
  (proc (rightpad string width padding-char)
    (cond
      (< (str-length string) width)
      (then
        (append stack string)
        (repeat (- width (str-length string))
          (replace-last stack (++ (last-of stack) padding-char))))
      (= (str-length string) width)
      (then
        (append stack string))
      (else
        (append stack "")
        (for i (- width 1)
          (replace-last stack (++ (last-of stack) (char-at string i))))
        (replace-last stack (++ (last-of stack) "…")))))

  (proc (ls cwd path)
    (resolve-path cwd path)
    (println (++ "Listing of " path ":"))
    (replace-last stack (file.content (last-of stack)))
    (for i (vec.size (last-of stack))
      (println (file.name (vec.at (last-of stack) i))))
    (pop)))
