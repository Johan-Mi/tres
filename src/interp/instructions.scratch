(macro the->stack (interp->stack the-interp))
(macro the.stack (interp.stack the-interp))

(macro (def-op name op)
       (proc (when-received (str-concat! "_switch_interp_step_" ,name))
         (:= interp-responded true)
         ,op))

(macro (def-op-taking name num-args op)
       (def-op
         ,name
         (do
           (assert (> (vec.size the.stack) (- ,num-args 1))
                   (str-concat! "interp-step: not enough arguments for `"
                                ,name
                                "`"))
           ,op)))

(macro (def-simple-op-1 name op)
       (def-op-taking
         ,name 1
         (modify (vec->last the.stack) ,op)))

(macro (def-simple-op-2 name op)
       (def-op-taking
         ,name 2
         (do
           (write (vec->at- the.stack 1)
                  (,op (vec.at- the.stack 1)
                       (vec.last the.stack)))
           (vec-shrink-by the.stack 1))))

(sprite "main"
  (def-op
    "exit"
    (write (interp->status the-interp) INTERP-STATUS-DEAD))

  (def-op
    "shutdown"
    (:= should-shutdown true))

  (def-op-taking
    "write" 2
    (do
      (write (vec.at- the.stack 1)
             (vec.last the.stack))
      (vec-shrink-by the.stack 2)))

  (def-op-taking
    "print" 1
    (do
      (print (vec.last the.stack))
      (vec-shrink-by the.stack 1)))

  (def-op-taking
    "println" 1
    (do
      (println (vec.last the.stack))
      (vec-shrink-by the.stack 1)))

  (def-op "linebreak" (linebreak))

  (def-op "term-clear" (term-clear))

  (def-op-taking
    "ask" 1
    (do
      (ask (vec.last the.stack))
      (write (vec->last the.stack) answer)))

  (def-op-taking
    "dup" 1
    (vec-push the->stack
              (vec.last the.stack)))

  (def-op-taking
    "2dup" 2
    (repeat 2
      (vec-push the->stack
                (vec.at- the.stack 1))))

  (def-op-taking
    "drop" 1
    (vec-shrink-by the.stack 1))

  (def-op-taking
    "2drop" 2
    (vec-shrink-by the.stack 2))

  (def-op-taking
    "over" 2
    (vec-push the->stack
              (vec.at- the.stack 1)))

  (def-op-taking
    "2over" 4
    (repeat 2
      (vec-push the->stack
                (vec.at- the.stack 3))))

  (def-op-taking
    "swap" 2
    (heap-swap (vec->last the.stack)
               (vec->at- the.stack 1)))

  (def-op-taking
    "2swap" 4
    (do
      (heap-swap (vec->at- the.stack 3)
                 (vec->at- the.stack 1))
      (heap-swap (vec->at- the.stack 2)
                 (vec->last the.stack))))

  (def-op-taking
    "nip" 2
    (do
      (write (vec->at- the.stack 1)
             (vec.last the.stack))
      (vec-shrink-by the.stack 1)))

  (def-op-taking
    "rot" 3
    (do
      (heap-swap (vec->at- the.stack 2)
                 (vec->at- the.stack 1))
      (heap-swap (vec->at- the.stack 1)
                 (vec->last the.stack))))

  (def-op-taking
    "-rot" 3
    (do
      (heap-swap (vec->at- the.stack 1)
                 (vec->last the.stack))
      (heap-swap (vec->at- the.stack 2)
                 (vec->at- the.stack 1))))

  (def-op-taking
    "tuck" 2
    (do
      (vec-push the->stack
                (vec.last the.stack))
      (heap-swap (vec->at- the.stack 2)
                 (vec->at- the.stack 1))))

  (def-op
    "vec-new"
    (do
      (vec-new)
      (vec-push the->stack (last-of stack))
      (pop)))

  (def-op-taking
    "vec-with-capacity" 1
    (do
      (vec-with-capacity (vec.last the.stack))
      (write (vec->last the.stack)
             (last-of stack))
      (pop)))

  (def-op-taking
    "vec-push" 2
    (do
      (vec-push (vec->at- the.stack 1)
                (vec.last the.stack))
      (vec-shrink-by the.stack 1)))

  (def-op-taking
    "vec-remove-first-occurence" 2
    (do
      (vec-remove-first-occurence (vec.at- the.stack 1)
                                  (vec.last the.stack))
      (vec-shrink-by the.stack 2)))

  (def-op-taking
    "vec-drop" 1
    (do
      (vec-shrink-by (vec.last the.stack) 1)
      (vec-shrink-by the.stack 1)))

  (def-op-taking
    "vec-pop" 1
    (do
      (vec-shrink-by (vec.last the.stack) 1)
      (write (vec->last the.stack)
             (vec.at- (vec.last the.stack) -1))))

  (def-op-taking
    "interp-spawn-from-src" 2
    (do
      (interp-spawn-from-src (vec.at- the.stack 1) (vec.last the.stack))
      (vec-shrink-by the.stack 1)
      (write (vec->last the.stack) (last-of stack))
      (pop)))

  (def-op-taking
    "interp-spawn-from-path" 2
    (do
      (interp-spawn-from-path (vec.at- the.stack 1) (vec.last the.stack))
      (vec-shrink-by the.stack 1)
      (write (vec->last the.stack) (last-of stack))
      (pop)))

  (def-op-taking
    "interp-awaken" 1
    (do
      (interp-awaken (vec.last the.stack))
      (vec-shrink-by the.stack 1)))

  (def-op-taking
    "interp-add-waker" 2
    (do
      (vec-push (interp->wakers (vec.at- the.stack 1)) (vec.last the.stack))
      (vec-shrink-by the.stack 2)))

  (def-op
    "get-cwd"
    (vec-push the->stack (interp.cwd the-interp)))

  (def-op-taking
    "heap-deallocate" 1
    (do
      (heap-deallocate (vec.last the.stack))
      (vec-shrink-by the.stack 1)))

  (def-simple-op-1 "vec.size" vec.size)
  (def-simple-op-2 "vec->at" vec->at)
  (def-simple-op-2 "vec.at" vec.at)
  (def-simple-op-1 "vec->last" vec->last)
  (def-simple-op-1 "vec.last" vec.last)
  (def-simple-op-2 "vec->at-" vec->at-)
  (def-simple-op-2 "vec.at-" vec.at-)

  (def-simple-op-1 "block->type" block->type)
  (def-simple-op-1 "block.type" block.type)

  (def-simple-op-1 "read" read)
  (def-simple-op-1 "not" not)
  (def-simple-op-1 "abs" abs)
  (def-simple-op-1 "floor" floor)
  (def-simple-op-1 "ceil" ceil)
  (def-simple-op-1 "sqrt" sqrt)
  (def-simple-op-1 "ln" ln)
  (def-simple-op-1 "log" log)
  (def-simple-op-1 "e^" e^)
  (def-simple-op-1 "ten^" ten^)
  (def-simple-op-1 "sin" sin)
  (def-simple-op-1 "cos" cos)
  (def-simple-op-1 "tan" tan)
  (def-simple-op-1 "asin" asin)
  (def-simple-op-1 "acos" acos)
  (def-simple-op-1 "atan" atan)
  (def-simple-op-1 "str-length" str-length)
  (def-simple-op-2 "+" +)
  (def-simple-op-2 "-" -)
  (def-simple-op-2 "*" *)
  (def-simple-op-2 "/" /)
  (def-simple-op-2 "mod" mod)
  (def-simple-op-2 "++" ++)
  (def-simple-op-2 ">" >)
  (def-simple-op-2 "<" <)
  (def-simple-op-2 "=" =)
  (def-simple-op-2 "!=" !=)
  (def-simple-op-2 "and" and)
  (def-simple-op-2 "or" or))
