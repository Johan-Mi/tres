(macro (def-op name op)
       (proc (when-received (str-concat! "_switch_interp_step_" ,name))
         (:= interp-responded true)
         ,op))

(macro (def-op-taking name num-args op)
       (def-op
         ,name
         (do
           (assert (> (vec.size (interp.stack the-interp)) (- ,num-args 1))
                   (str-concat! "interp-step: not enough arguments for `"
                                ,name
                                "`"))
           ,op)))

(macro (def-simple-op-1 name op)
       (def-op-taking
         ,name 1
         (modify (vec->last (interp.stack the-interp)) ,op)))

(macro (def-simple-op-2 name op)
       (def-op-taking
         ,name 2
         (do
           (write (vec->at- (interp.stack the-interp) 1)
                  (,op (vec.at- (interp.stack the-interp) 1)
                       (vec.last (interp.stack the-interp))))
           (vec-shrink-by (interp.stack the-interp) 1))))

(sprite "main"
  (def-op
    "exit"
    (write (interp->status the-interp) INTERP-STATUS-DEAD))

  (def-op-taking
    "write" 2
    (do
      (write (vec.at- (interp.stack the-interp) 1)
             (vec.last (interp.stack the-interp)))
      (vec-shrink-by (interp.stack the-interp) 2)))

  (def-op-taking
    "print" 1
    (do
      (print (vec.last (interp.stack the-interp)))
      (vec-shrink-by (interp.stack the-interp) 1)))

  (def-op-taking
    "println" 1
    (do
      (println (vec.last (interp.stack the-interp)))
      (vec-shrink-by (interp.stack the-interp) 1)))

  (def-op "linebreak" (linebreak))

  (def-op-taking
    "dup" 1
    (vec-push (interp->stack the-interp)
              (vec.last (interp.stack the-interp))))

  (def-op-taking
    "2dup" 2
    (repeat 2
      (vec-push (interp->stack the-interp)
                (vec.at- (interp.stack the-interp) 1))))

  (def-op-taking
    "drop" 1
    (vec-shrink-by (interp.stack the-interp) 1))

  (def-op-taking
    "2drop" 2
    (vec-shrink-by (interp.stack the-interp) 2))

  (def-op-taking
    "over" 2
    (vec-push (interp->stack the-interp)
              (vec.at- (interp.stack the-interp) 1)))

  (def-op-taking
    "2over" 4
    (repeat 2
      (vec-push (interp->stack the-interp)
                (vec.at- (interp.stack the-interp) 3))))

  (def-op-taking
    "swap" 2
    (heap-swap (vec->last (interp.stack the-interp))
               (vec->at- (interp.stack the-interp) 1)))

  (def-op-taking
    "2swap" 4
    (do
      (heap-swap (vec->at- (interp.stack the-interp) 3)
                 (vec->at- (interp.stack the-interp) 1))
      (heap-swap (vec->at- (interp.stack the-interp) 2)
                 (vec->last (interp.stack the-interp)))))

  (def-op-taking
    "nip" 2
    (do
      (write (vec->at- (interp.stack the-interp) 1)
             (vec.last (interp.stack the-interp)))
      (vec-shrink-by (interp.stack the-interp) 1)))

  (def-op-taking
    "rot" 3
    (do
      (heap-swap (vec->at- (interp.stack the-interp) 2)
                 (vec->at- (interp.stack the-interp) 1))
      (heap-swap (vec->at- (interp.stack the-interp) 1)
                 (vec->last (interp.stack the-interp)))))

  (def-op-taking
    "-rot" 3
    (do
      (heap-swap (vec->at- (interp.stack the-interp) 1)
                 (vec->last (interp.stack the-interp)))
      (heap-swap (vec->at- (interp.stack the-interp) 2)
                 (vec->at- (interp.stack the-interp) 1))))

  (def-op-taking
    "tuck" 2
    (do
      (vec-push (interp->stack the-interp)
                (vec.last (interp.stack the-interp))) 
      (heap-swap (vec->at- (interp.stack the-interp) 2)
                 (vec->at- (interp.stack the-interp) 1))))

  (def-simple-op-1 "read" read)
  (def-simple-op-1 "not" not)
  (def-simple-op-1 "abs" abs)
  (def-simple-op-1 "floor" floor)
  (def-simple-op-1 "ceil" ceil)
  (def-simple-op-1 "sqrt" sqrt)
  (def-simple-op-1 "ln" ln)
  (def-simple-op-1 "log" log)
  (def-simple-op-1 "e^" e^)
  (def-simple-op-1 "ten^" ten^)
  (def-simple-op-1 "sin" sin)
  (def-simple-op-1 "cos" cos)
  (def-simple-op-1 "tan" tan)
  (def-simple-op-1 "asin" asin)
  (def-simple-op-1 "acos" acos)
  (def-simple-op-1 "atan" atan)
  (def-simple-op-1 "str-length" str-length)
  (def-simple-op-2 "+" +)
  (def-simple-op-2 "-" -)
  (def-simple-op-2 "*" *)
  (def-simple-op-2 "/" /)
  (def-simple-op-2 "mod" mod)
  (def-simple-op-2 "++" ++)
  (def-simple-op-2 ">" >)
  (def-simple-op-2 "<" <)
  (def-simple-op-2 "=" =)
  (def-simple-op-2 "!=" !=)
  (def-simple-op-2 "and" and)
  (def-simple-op-2 "or" or))
