; # Vec
; - Memory block size (capacity + 2)
; - "Vec"
; - Length of vector
; - Items...

(macro VEC-INITIAL-CAPACITY 2)

(sprite "main"
  ; Creates a new vector with the default capacity defined by
  ; `VEC-INITIAL-CAPACITY`. A pointer to the vector gets pushed onto the stack.
  (proc (vec-new)
    (vec-with-capacity VEC-INITIAL-CAPACITY))

  ; Like `vec-new` but it lets you choose an initial capacity.
  (proc (vec-with-capacity cap)
    (heap-allocate (+ 2 cap))
    (write (block->type (last-of stack)) "Vec")
    (write (vec->size (last-of stack)) 0))

  ; Append a value to a heap-allocated vector. The `vec` parameter is a pointer
  ; to a pointer to the vector so it can be changed in case of a reallocation.
  (proc (vec-push vec value)
    ; Reallocate if the vector is full
    (when (= (vec.size (read vec))
             (vec.cap (read vec)))
      (heap-reallocate (read vec) (+ 2 (* 2 (vec.size (read vec)))))
      (write vec (last-of stack))
      (pop))

    ([]+= heap (vec->size (read vec)) 1)
    (write (vec->last (read vec)) value))

  ; Like `vec-push` but `vec` has one less level of indirection and the new
  ; pointer gets pushed to the stack. This can be used instead of `vec-push` if
  ; the pointer to the vector is not stored on the heap so it cannot be
  ; modified.
  (proc (vec-push-stack vec value)
    (if (= (vec.size vec)
           (vec.cap vec))
      (then
        (heap-reallocate vec (+ 2 (* 2 (vec.size vec)))))
      (else
        (append stack vec)))

    ([]+= heap (vec->size (last-of stack)) 1)
    (write (vec->last (last-of stack)) value))

  ; Remove the first occurence of a value from a vector. If the vector doesn't
  ; contain the value, nothing happens.
  (proc (vec-remove-first-occurence vec value)
    (variables i j)
    (for i (vec.size vec)
      (when (= value (vec.at vec i))
        (for j (- (vec.size vec) i)
          (write (vec->at vec (+ i j -1)) (vec.at vec (+ i j))))
        ([]-= heap (vec->size vec) 1)
        (stop-this-script))))

  ; Decreases the size of a vector by a given amount without verifying that
  ; enough elements exist.
  (proc (vec-shrink-by vec amount)
    ([]-= heap (vec->size vec) amount)))
