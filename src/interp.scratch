; # Interpreter
; - Memory block size
; - "Interpreter"
; - Status
; - Pointer to vector of tokens
; - Instruction pointer
; - Pointer to stack
; - Current working directory
; - Pointer to vector of wakers

(macro INTERP-STATUS-ACTIVE "Active")
(macro INTERP-STATUS-DEAD "Dead")
(macro INTERP-STATUS-ASLEEP "Asleep")

(include "src/interp/lex.scratch")
(include "src/interp/instructions.scratch")

(sprite "main"
  (variables interp-responded the-interp)

  (proc (interp-spawn-from-src cwd src)
    (interp-new cwd)
    (interp-lex (last-of stack) src)
    (vec-push-stack process-table (last-of stack))
    (pop-to process-table))

  (proc (interp-spawn-from-path cwd path)
    (resolve-path cwd path)
    (interp-spawn-from-src cwd (file.content (last-of stack)))
    (delete- stack 1))

  (proc (interp-new cwd)
    (heap-allocate 7)
    (write (block->type (last-of stack)) "Interpreter")
    (write (interp->status (last-of stack)) INTERP-STATUS-ASLEEP)
    (write (interp->ip (last-of stack)) 0)
    (write (interp->cwd (last-of stack)) cwd)
    (vec-new)
    (write (interp->tokens (!!- stack 1)) (last-of stack))
    (pop)
    (vec-new)
    (write (interp->stack (!!- stack 1)) (last-of stack))
    (pop)
    (vec-new)
    (write (interp->wakers (!!- stack 1)) (last-of stack))
    (pop))

  (proc (interp-awaken interp)
    (assert (!= (interp.status interp) INTERP-STATUS-DEAD)
            "interp-awaken: tried to awaken dead interpreter")
    (write (interp->status interp) INTERP-STATUS-ACTIVE))

  (proc (when-received "_switch_heap_deallocate_Interpreter")
    (append deallocations (interp.tokens (last-of stack)))
    (append deallocations (interp.stack (last-of stack)))
    (append deallocations (interp.wakers (last-of stack))))

  (proc (interp-step interp)
    (variables ip curr-token)

    (:= the-interp interp)
    (assert (= (interp.status interp) INTERP-STATUS-ACTIVE)
            "interp-step: tried to step inactive interpreter")
    (:= ip (+ 1 (interp.ip interp)))
    (assert (not (> ip (vec.size (interp.tokens interp))))
            (++ "interp-step: ip " ip " is out of bounds"))

    (write (interp->ip interp) ip)
    (:= curr-token (vec.at (interp.tokens interp) ip))
    (cond
      (number? curr-token)
      (then
        (vec-push (interp->stack interp) curr-token))

      (= "@" curr-token)
      (then
        (+= ip 1)
        (assert (not (> ip (vec.size (interp.tokens interp))))
                (++ "interp-step: ip " ip " is out of bounds"))
        (write (interp->ip interp) ip)
        (vec-push (interp->stack interp)
                  (vec.at (interp.tokens interp) ip)))

      (else
        (:= interp-responded false)
        (send-broadcast-sync (++ "_switch_interp_step_" curr-token))
        (assert interp-responded
                (++ "interp-step: unknown instruction `" curr-token "`"))))))
